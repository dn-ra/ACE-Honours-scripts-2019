# -*- coding: utf-8 -*-
"""
Created on Mon Sep  9 12:50:18 2019

@author: dan_r
"""

import csv

#constants

file = 'PROKKA_09062019.tbl'
fileprefix = 'Prokka'

plasmid_terms = {}
non_plasmid_terms = {}


process = False #search the annotations for plasmid-selfish genes and words?
use_keywords= True #use the selection of plsamid and non-plasmid keywords?


#plasmid terms

plasmid_terms['acc'] = set([
     'PF13604',
     'PF07728',
     'PF02661',
     'PF00437',
     'PF07996',
     'PF09677',
     'PF00004',
     'PF01656',
     'PF13304',
     'PF10412',
     'PF02534',
     'PF12696',
     'PF07362',
     'PF01845',
     'PF04014',
     'PF03432',
     'PF04837',
     'PF13481',
     'PF05857',
     'PF04610',
     'PF05015',
     'PF06412',
     'PF11740',
     'PF08281',
     'PF03090',
     'PF05713',
     'PF01815',
     'PF03389',
     'PF08708',
     'PF06769',
     'PF04221',
     'PF04899',
     'PF05016',
     'PF10134',
     'PF01051',
     'PF05144',
     'PF02604',
     'PF01402',
     'PF06504',
     'PF05155',
     'PF07042',
     'PF01446',
     'PF01076',
     'PF02486',
     'PF05732',
     'PF01719',
     'PF05509',
     'PF05840',
     'PF09274',
     'PF12910']) #accessions


#merge these into dictionary after converting to lower case
plasmid_names = set([
     'AAA Domain',
     'AAA domain (dynein-related subfamily)',
     'Fic/DOC family',
     'Type II/IV secretion system protein',
     'Type IV secretion system proteins',
     'Type-F conjugative transfer system protein',
     'ATPase family associated with various cellular activities',
     'CobQ/CobB/MinD/ParA nucleotide binding domain',
     'AAA domain',
     'Type IV secretion-system coupling protein DNA-binding domain',
     'Type IV secretory system Conjugative DNA transfer',
     'TraM recognition site of TraD and TraG',
     'Post-segregation antitoxin CcdA',
     'CcdB protein',
     'Antidote-toxin recognition MazE',
     'Relaxase/Mobilisation nuclease domain',
     'MbeB-like, N-term conserved region',
     'AAA domain',
     'TraX protein',
     'TrbL/VirB6 plasmid conjugal transfer protein',
     'Plasmid maintenance system killer protein',
     'Conjugal transfer protein TraD',
     'Plasmid replication region DNA-binding N-term',
     'Sigma-70, region 4',
     'Replicase family',
     'Bacterial mobilisation protein',
     'Rop protein',
     'MobA/MobL family',
     'Primase C terminal 1 (PriCT-1)',
     'Plasmid encoded toxin Txe',
     'RelB antitoxin',
     'MbeD/MobD like',
     'Plasmid stabilisation system protein',
     'Replication initiator protein A',
     'Initiator Replication protein',
     'Phage replication protein CRI',
     'Antitoxin Phd_YefM, type II toxin-antitoxin system',
     'Ribbon-helix-helix protein, copG family',
     'Replication protein C',
     'Phage X family',
     'TrfA protein',
     'Replication protein',
     'Plasmid recombination enzyme',
     'Replication initiation',
     'factor',
     'Firmicute plasmid replication protein',
     'Plasmid replication protein',
     'TraY domain',
     'Bacteriophage replication gene A protein',
     'ParG',
     'Antitoxin of toxin-antitoxin stability system N-terminal'])#pfam names


non_plasmid_terms['acc'] = set([
     'PF13239',
     'PF01073',
     'PF10327',
     'PF00950',
     'PF00005',
     'PF10397',
     'PF01636',
     'PF04655',
     'PF00561',
     'PF12695',
     'PF12697',
     'PF07751',
     'PF00583',
     'PF13673',
     'PF13420',
     'PF13508',
     'PF13523',
     'PF01979',
     'PF07969',
     'PF13147',
     'PF13594',
     'PF02424',
     'PF12895',
     'PF03869',
     'PF02374',
     'PF12951',
     'PF00528',
     'PF00216',
     'PF00308',
     'PF13461',
     'PF00302',
     'PF09827',
     'PF12639',
     'PF01320',
     'PF00346',
     'PF08706',
     'PF13359',
     'PF01609',
     'PF13701',
     'PF13737',
     'PF13751',
     'PF03400',
     'PF13610',
     'PF03050',
     'PF13817',
     'PF01610',
     'PF01526',
     'PF00270',
     'PF01548',
     'PF00186',
     'PF00145',
     'PF01791',
     'PF00563',
     'PF00679',
     'PF03764',
     'PF00892',
     'PF07669',
     'PF13536',
     'PF01370',
     'PF08445',
     'PF13394',
     'PF00210',
     'PF01706',
     'PF01580',
     'PF01571',
     'PF08669',
     'PF00990',
     'PF00009',
     'PF03144',
     'PF00799',
     'PF00196',
     'PF13488',
     'PF13524',
     'PF13692',
     'PF13579',
     'PF00534',
     'PF00392',
     'PF05973',
     'PF04138',
     'PF02183',
     'PF02518',
     'PF13581',
     'PF01844',
     'PF08279',
     'PF12728',
     'PF12844',
     'PF13276',
     'PF13384',
     'PF13412',
     'PF13443',
     'PF13463',
     'PF13518',
     'PF13551',
     'PF01381',
     'PF13560',
     'PF13565',
     'PF13592',
     'PF13730',
     'PF13744',
     'PF13936',
     'PF02796',
     'PF02954',
     'PF13545',
     'PF08220',
     'PF09339',
     'PF01527',
     'PF12759',
     'PF01710',
     'PF13005',
     'PF11427',
     'PF00730',
     'PF01638',
     'PF12146',
     'PF00817',
     'PF11799',
     'PF11798',
     'PF12835',
     'PF01695',
     'PF13007',
     'PF02502',
     'PF00753',
     'PF12706',
     'PF06291',
     'PF00206',
     'PF01810',
     'PF02402',
     'PF00015',
     'PF07690',
     'PF13347',
     'PF05977',
     'PF01926',
     'PF01047',
     'PF12802',
     'PF13659',
     'PF09140',
     'PF08477',
     'PF09864',
     'PF03205',
     'PF04471',
     'PF00893',
     'PF02384',
     'PF07993',
     'PF00877',
     'PF01909',
     'PF05616',
     'PF13425',
     'PF03977',
     'PF10543',
     'PF00691',
     'PF01385',
     'PF07282',
     'PF06891',
     'PF01850',
     'PF13470',
     'PF13091',
     'PF02255',
     'PF02452',
     'PF00805',
     'PF13599',
     'PF13529',
     'PF01546',
     'PF04586',
     'PF00294',
     'PF05930',
     'PF05269',
     'PF05065',
     'PF05135',
     'PF02899',
     'PF13495',
     'PF00589',
     'PF04860',
     'PF02562',
     'PF08543',
     'PF01679',
     'PF02719',
     'PF03288',
     'PF09250',
     'PF04352',
     'PF00809',
     'PF06958',
     'PF02852',
     'PF03693',
     'PF12651',
     'PF00078',
     'PF04055',
     'PF07508',
     'PF00239',
     'PF00072',
     'PF03732',
     'PF04321',
     'PF02082',
     'PF07499',
     'PF01330',
     'PF05491',
     'PF05496',
     'PF09851',
     'PF00565',
     'PF00436',
     'PF04203',
     'PF00515',
     'PF13374',
     'PF13414',
     'PF13424',
     'PF13428',
     'PF13432',
     'PF13431',
     'PF07719',
     'PF07720',
     'PF13174',
     'PF13176',
     'PF13181',
     'PF13371',
     'PF06056',
     'PF02909',
     'PF00440',
     'PF05717',
     'PF06519',
     'PF03544',
     'PF13155',
     'PF13362',
     'PF13662',
     'PF00905',
     'PF02371',
     'PF01978',
     'PF06782',
     'PF13538',
     'PF05272',
     'PF01443',
     'PF04932',
     'PF02706',
     'PF09811',
     'PF09586',
     'PF06564',
     'PF03739',
     'PF03811',
     'PF00882',
     'PF05707',
     'PF00665',
     'PF13333',
     'PF13683',
     'PF12869',
     'PF01396'])

plasmid_terms['words'] = [
        'resolv', 
        'relax', 
        'conjug', 
        'trb', 
        'mob', 
        'plasmid', 
        'type iv', 
        'toxin', 
        'chromosome partitioning', 
        'chromosome segregation', 
        'rel']

#Non-plasmid terms

#merge these into dictionary after converting to lowercase
non_plasmid_names = set([
     '2TM domain',
     '3-beta hydroxysteroid dehydrogenase/isomerase family',
     'Serpentine type 7TM GPCR chemoreceptor Sri',
     'ABC 3 transport family',
     'ABC transporter',
     'Adenylosuccinate lyase C-terminus',
     'Phosphotransferase enzyme family',
     'Aminoglycoside/hydroxyurea antibiotic resistance kinase',
     'alpha/beta hydrolase fold',
     'Alpha/beta hydrolase family',
     'Alpha/beta hydrolase family',
     'Abi-like protein',
     'Acetyltransferase (GNAT) family',
     'Acetyltransferase (GNAT) domain',
     'Acetyltransferase (GNAT) domain',
     'Acetyltransferase (GNAT) domain',
     'Acetyltransferase (GNAT) domain',
     'Amidohydrolase family',
     'Amidohydrolase family',
     'Amidohydrolase',
     'Amidohydrolase',
     'ApbE family',
     'Anaphase-promoting complex, cyclosome, subunit 3',
     'Arc-like DNA binding domain',
     'Anion-transporting ATPase',
     'Autotransporter-associated beta strand repeat',
     'Binding-protein-dependent transport system inner membrane component',
     'Bacterial DNA-binding protein',
     'Bacterial dnaA protein',
     'Cell-wall surface anchor repeat',
     'Chloramphenicol acetyltransferase',
     'CRISPR associated protein Cas2',
     'DNase/tRNase domain of colicin-like bacteriocin',
     'Colicin immunity protein / pyocin immunity protein',
     'Respiratory-chain NADH dehydrogenase, 49 Kd subunit',
     'D5 N terminal like',
     'DDE superfamily endonuclease',
     'Transposase DDE domain',
     'Transposase DDE domain group 1',
     'Transposase DDE domain',
     'Transposase DDE domain',
     'IS1 transposase',
     'DDE domain',
     'Transposase IS66 family',
     'IS66 C-terminal element',
     'Transposase',
     'Tn3 transposase DDE domain',
     'DEAD/DEAH box helicase',
     'Transposase',
     'Dihydrofolate reductase',
     'C-5 cytosine-specific DNA methylase',
     'DeoC/LacD family aldolase',
     'EAL domain',
     'Elongation factor G C-terminus',
     'Elongation factor G, domain IV',
     'EamA-like transporter family',
     'Eco57I restriction-modification methylase',
     'Multidrug resistance efflux transporter',
     'NAD dependent epimerase/dehydratase family',
     'FR47-like protein',
     '4Fe-4S single cluster domain',
     'Ferritin-like domain',
     'FliG C-terminal domain',
     'FtsK/SpoIIIE family',
     'Aminomethyltransferase folate-binding domain',
     'Glycine cleavage T-protein C-terminal barrel domain',
     'GGDEF domain',
     'Elongation factor Tu GTP binding domain',
     'Elongation factor Tu domain 2',
     'Geminivirus Rep catalytic domain',
     'Bacterial regulatory proteins, luxR family',
     'Glycine zipper',
     'Glycosyl transferases group 1',
     'Glycosyl transferases group 1',
     'Glycosyl transferase 4-like domain',
     'Glycosyl transferases group 1',
     'Bacterial regulatory proteins, gntR family',
     'Phage derived protein Gp49-like (DUF891)',
     'GtrA-like protein',
     'Homeobox associated leucine zipper',
     'Histidine kinase-, DNA gyrase B-, and HSP90-like ATPase',
     'Histidine kinase-like ATPase domain',
     'HNH endonuclease',
     'HTH domain',
     'Helix-turn-helix domain',
     'Helix-turn-helix domain',
     'HTH-like domain',
     'Homeodomain-like domain',
     'Winged helix-turn-helix DNA-binding',
     'Cro/C1-type HTH DNA-binding domain',
     'Winged helix DNA-binding domain',
     'Helix-turn-helix domain',
     'Winged helix-turn helix',
     'Helix-turn-helix',
     'Helix-turn-helix domain',
     'Homeodomain-like domain',
     'Winged helix-turn helix',
     'Helix-turn-helix domain',
     'Helix-turn-helix domain',
     'Helix-turn-helix domain',
     'Helix-turn-helix domain of resolvase',
     'Bacterial regulatory protein, Fis family',
     'Crp-like helix-turn-helix domain',
     'DeoR-like helix-turn-helix domain',
     'IclR helix-turn-helix domain',
     'Transposase',
     'InsA C-terminal domain',
     'Transposase',
     'putative Helix-turn-helix domain of transposase IS66',
     'Tc3 transposase',
     'HhH-GPD superfamily base excision DNA repair protein',
     'HxlR-like helix-turn-helix',
     'Putative lysophospholipase',
     'impB/mucB/samB family',
     'impB/mucB/samB family C-terminal',
     'IMS family HHH motif',
     'Integrase',
     'IstB-like ATP binding protein',
     'Transposase C of IS166 homeodomain',
     'Ribose/Galactose Isomerase',
     'Metallo-beta-lactamase superfamily',
     'Beta-lactamase superfamily domain',
     'Bor protein',
     'Lyase',
     'LysE type translocator',
     'Lysis protein',
     'Methyl-accepting chemotaxis protein (MCP) signalling domain',
     'Major Facilitator Superfamily',
     'MFS/sugar transport protein',
     'Transmembrane secretion effector',
     '50S ribosome-binding GTPase',
     'MarR family',
     'MarR family',
     'Methyltransferase domain',
     'ATPase MipZ',
     'Miro-like protein',
     'Membrane-bound lysozyme-inhibitor of c-type lysozyme',
     'Molybdopterin guanine dinucleotide synthesis protein B',
     'Restriction endonuclease',
     'Small Multidrug Resistance protein',
     'N-6 DNA Methylase',
     'Male sterility protein',
     'NlpC/P60 family',
     'Nucleotidyltransferase domain',
     'Neisseria meningitidis TspB protein',
     'O-antigen ligase like membrane protein',
     'Na+-transporting oxaloacetate decarboxylase beta subunit',
     'ORF6N domain',
     'OmpA family',
     'Probable transposase',
     'Putative transposase DNA-binding domain',
     'P2 phage tail completion protein R (GpR)',
     'PIN domain',
     'PIN domain',
     'PLD-like domain',
     'PTS system, Lactose/Cellobiose specific IIA subunit',
     'PemK-like protein',
     'Pentapeptide repeats (8 copies)',
     'Pentapeptide repeats (9 copies)',
     'Peptidase_C39 like family',
     'Peptidase family M20/M25/M40',
     'Caudovirus prohead protease',
     'pfkB family carbohydrate kinase',
     'Prophage CP4-57 regulatory protein (AlpA)',
     'Bacteriophage CII protein',
     'Phage capsid family',
     'Phage gp6-like head-tail connector protein',
     'Phage integrase, N-terminal SAM-like domain',
     'Phage integrase, N-terminal SAM-like domain',
     'Phage integrase family',
     'Phage portal protein',
     'PhoH-like protein',
     'Phosphomethylpyrimidine kinase',
     'Proteolipid membrane potential modulator',
     'Polysaccharide biosynthesis protein',
     'Poxvirus D5 protein-like',
     'Bifunctional DNA primase/polymerase, N-terminal',
     'ProQ/FINO family',
     'Pterin binding enzyme',
     'S-type Pyocin',
     'Pyridine nucleotide-disulphide oxidoreductase, dimerisation domain',
     'Uncharacterised protein family (UPF0156)',
     'Ribbon-helix-helix domain',
     'Reverse transcriptase (RNA-dependent DNA polymerase)',
     'Radical SAM superfamily',
     'Recombinase',
     'Resolvase, N terminal domain',
     'Response regulator receiver domain',
     'Retrotransposon gag protein',
     'RmlD substrate binding domain',
     'Transcriptional regulator',
     'RuvA, C-terminal domain',
     'RuvA N terminal domain',
     'Holliday junction DNA helicase ruvB C-terminus',
     'Holliday junction DNA helicase ruvB N-terminus',
     'Short C-terminal domain',
     'Staphylococcal nuclease homologue',
     'Single-strand binding protein family',
     'Sortase family',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'TPR repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Tetratricopeptide repeat',
     'Putative ATPase subunit of terminase (gpP-like)',
     'Tetracyclin repressor, C-terminal all-alpha domain',
     'Bacterial regulatory proteins, tetR family',
     'IS66 Orf2 like protein',
     'TolA C-terminal',
     'Gram-negative bacterial tonB protein',
     'Toprim-like',
     'Toprim domain',
     'Toprim domain',
     'Penicillin binding protein transpeptidase domain',
     'Transposase IS116/IS110/IS902 family',
     'Sugar-specific transcriptional regulator TrmB',
     'Uncharacterised protein family (UPF0236)',
     'Family description',
     'Virulence-associated protein E',
     'Viral (Superfamily 1) RNA helicase',
     'O-Antigen ligase',
     'Chain length determinant protein',
     '"Essential protein Yae1, N terminal"',
     'Bacterial membrane protein YfhO',
     'YhjQ protein',
     'Predicted permease YjgP/YjgQ family',
     'InsA N-terminal domain',
     'Zinc dependent phospholipase C',
     'Zonular occludens toxin (Zot)',
     'Integrase core domain',
     'Integrase core domain',
     'Integrase core domain',
     'tRNA_anti-like',
     'Topoisomerase DNA binding C4 zinc finger'])

non_plasmid_terms['words'] = [
        'capsid', 
        'phage', 
        'tail', 
        'head', 
        'tape measure', 
        'antitermination', 
        'reverse transcriptase', 
        'crispr', 
        'integrase', 
        'restrict', 
        'resolv', 
        'topoisomerase', 
        'exonuclease', 
        'transpos'] # want to include IS[0-9] but that would involve a regex search method instead

#set pfam names to lower case
plasmid_terms['name'] = {n.lower() for n in plasmid_names}
non_plasmid_terms['name'] = {n.lower() for n in non_plasmid_names}

#read in prokka file
cdscluster = {}
with open(file, 'r') as f:
    readfile = csv.reader(f, delimiter='\n')
    for line in readfile:
        if line[0].startswith('>'): #indicates beginning of new contig
            currentkey = line[0].replace(">Feature ", "")
            cdscluster.setdefault(currentkey, {})
        elif line[0].split()[0].isdigit(): #find CDS or tRNA tag
            if 'gene' not in line[0]:
                typ = line[0].split()[2]
        elif line[0].startswith('\t\t\tinference'):
            line = next(readfile) #go to next line to get inference details. if no second inference line, it's a hypothetical protein
        
        if line[0].startswith('\t\t\tinference'):
            pfam = line[0].split(':')[-1]
        elif line[0].startswith('\t\t\tlocus'):
            locus =line[0].split('\t')[-1]
        elif line[0].startswith('\t\t\tproduct'):
            product = line[0].split('\t')[-1]
            if product != 'hypothetical protein':
                cdscluster[currentkey][locus] = [typ, pfam, product]
                
#write clustering to file

filename = "{}.clumped".format(fileprefix)

with open(filename, 'w') as f:
    w = csv.writer(f, delimiter = '\t', quoting = csv.QUOTE_NONE, escapechar = '\\')
    #header here
    w.writerow(["CONTIG ID", "ORF ID", "TYPE", "PFAM", "ANNOTATION"])
    for key, value in cdscluster.items():
        w.writerow([key])
        if value:
            for locus, product in value.items():
                w.writerow(['\t' + locus + '\t' + '\t'.join([product[0], product[1], product[2]])], )
        else:
            w.writerow(['\t' + '--No hits--'])  



#process dictionary with plasmid-selfish gene data
if process:
    count_data = {}
    no_hits_count = 0
    
    for contig, orfs in cdscluster.items():
        if orfs:
            
            no_match = []
            plas_match = []
            other_match = []
            for o in orfs.values():
                
                if o[0] != 'CDS':
                    other_match.append(o[2])
                elif o[1] in plasmid_terms['acc']:
                    plas_match.append(o[2])
                elif o[1] in non_plasmid_terms['acc']:
                    other_match.append(o[2])
                    
                else:
                    lowcase = o[2].lower() #set pfam name to all lowercase for matching
                    if lowcase in plasmid_terms['name']:
                        plas_match.append(o[2])
                    elif lowcase in non_plasmid_terms['name']:
                        other_match.append(o[2])
                    else:
                        found = None
                        if use_keywords == True:
                            found = None
                            for w in plasmid_terms['words']:
                                if lowcase.find(w) != -1:
                                    plas_match.append(o[2])
                                    found = True
                                    break    
                            if found == None:
                                for w in non_plasmid_terms['words']:
                                    if lowcase.find(w) != -1:
                                        other_match.append(o[2])
                                        found = True
                                        break
                        if found == None:
                            no_match.append(o[2]) #no matches at all found. add into list for investigation later
                            
                            
            count_data[contig] = {'plas': plas_match, 'no_plas': other_match, 'unknown': no_match}
                    
        else:
            no_hits_count +=1
    
    print('plasmid search performed. results stored in "count data". {} contigs found with no identifiable orfs.'.format(no_hits_count))
    
    
    

